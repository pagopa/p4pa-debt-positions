{
	"info": {
		"_postman_id": "24f9f82c-273a-4ae3-9a9c-c02c0d86b094",
		"name": "p4pa-debt-positions-E2E.postman_collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29646859"
	},
	"item": [
		{
			"name": "00_login",
			"item": [
				{
					"name": "00_getAuthToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm=instrumentPmMethod(pm);\r",
									"\r",
									"pm.test(\"DebtPosition - 00_getAuthtoken - Responses with 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"DebtPosition - 00_getAuthtoken - Verify response body\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonResponse).have.property(\"access_token\")\r",
									"    pm.expect(jsonResponse).have.property(\"token_type\")\r",
									"    pm.expect(jsonResponse).have.property(\"expires_in\")\r",
									"});\r",
									"\r",
									"let jsonResponse = pm.response.json();\r",
									"pm.collectionVariables.set(\"accessToken\", jsonResponse.access_token);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{p4paAuthBaseUrl}}/auth/token?client_id=piattaforma-unitaria&grant_type=urn:ietf:params:oauth:grant-type:token-exchange&subject_token={{tokenExchange_subjectToken}}&subject_issuer={{tokenExchange_issuer}}&scope=openid&subject_token_type=urn:ietf:params:oauth:token-type:jwt",
							"host": [
								"{{p4paAuthBaseUrl}}"
							],
							"path": [
								"auth",
								"token"
							],
							"query": [
								{
									"key": "client_id",
									"value": "piattaforma-unitaria"
								},
								{
									"key": "grant_type",
									"value": "urn:ietf:params:oauth:grant-type:token-exchange"
								},
								{
									"key": "subject_token",
									"value": "{{tokenExchange_subjectToken}}"
								},
								{
									"key": "subject_issuer",
									"value": "{{tokenExchange_issuer}}"
								},
								{
									"key": "scope",
									"value": "openid"
								},
								{
									"key": "subject_token_type",
									"value": "urn:ietf:params:oauth:token-type:jwt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "00_findOrganizationByIpaCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm=instrumentPmMethod(pm);\r",
									"\r",
									"pm.test(\"DebtPosition - 00_findOrganizationByIpaCode - Responses with 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"DebtPosition - 00_getAuthtoken - Verify response body\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonResponse).have.property(\"organizationId\")\r",
									"    pm.expect(jsonResponse).have.property(\"orgFiscalCode\")\r",
									"    pm.expect(jsonResponse).have.property(\"orgName\")\r",
									"});\r",
									"\r",
									"let jsonResponse = pm.response.json();\r",
									"pm.collectionVariables.set(\"organizationId\", jsonResponse.organizationId);\r",
									"pm.collectionVariables.set(\"orgFiscalCode\", jsonResponse.orgFiscalCode);\r",
									"pm.collectionVariables.set(\"orgName\", jsonResponse.orgName);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{organizationBaseUrl}}/crud/organizations/search/findByIpaCode?ipaCode={{ipaCode}}",
							"host": [
								"{{organizationBaseUrl}}"
							],
							"path": [
								"crud",
								"organizations",
								"search",
								"findByIpaCode"
							],
							"query": [
								{
									"key": "ipaCode",
									"value": "{{ipaCode}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "01_createDp",
			"item": [
				{
					"name": "01_findDebtPositionTypeOrgByOrgIdAndCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm=instrumentPmMethod(pm);\r",
									"\r",
									"pm.test(\"DebtPosition - 01_findDebtPositionTypeOrgByOrgIdAndCode - Responses with 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"DebtPosition - 01_findDebtPositionTypeOrgByOrgIdAndCode - Verify response body\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonResponse).have.property(\"debtPositionTypeOrgId\")\r",
									"    pm.expect(jsonResponse).have.property(\"code\")\r",
									"});\r",
									"\r",
									"let jsonResponse = pm.response.json();\r",
									"pm.collectionVariables.set(\"debtPositionTypeOrgId\", jsonResponse.debtPositionTypeOrgId);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{debtPositionBaseUrl}}/crud/debt-position-type-orgs/search/findByOrganizationIdAndCode?organizationId={{organizationId}}&code={{debtPositionTypeOrgCode}}",
							"host": [
								"{{debtPositionBaseUrl}}"
							],
							"path": [
								"crud",
								"debt-position-type-orgs",
								"search",
								"findByOrganizationIdAndCode"
							],
							"query": [
								{
									"key": "organizationId",
									"value": "{{organizationId}}"
								},
								{
									"key": "code",
									"value": "{{debtPositionTypeOrgCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "01_createDebtPosition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm=instrumentPmMethod(pm);\r",
									"\r",
									"pm.test(\"DebtPositions - 01_create_dp - Responses with 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/*pm.test(\"DebtPositions - 01_create_dp - Verify response body\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonResponse).have.property(\"workflowId\")\r",
									"});\r",
									"\r",
									"let jsonResponse = pm.response.json();\r",
									"pm.collectionVariables.set(\"workflowId\", jsonResponse.workflowId);*/\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"function generateRandomNumber() {\r",
									"    let randomNumber = '';\r",
									"    for (let i = 0; i < 10; i++) {\r",
									"        randomNumber += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomNumber;\r",
									"}\r",
									"\r",
									"let randomNumber = generateRandomNumber();\r",
									"\r",
									"pm.collectionVariables.set(\"randomNumber\", randomNumber);\r",
									"pm.collectionVariables.set(\"fiscalCode\", `AAAAAA69A45A602A`);\r",
									"pm.collectionVariables.set(\"debtPositionId\", `${randomNumber}`);\r",
									"pm.collectionVariables.set(\"currentDate\", new Date());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"iupdOrg\": \"iupdOrg\",\r\n    \"description\": \"description\",\r\n    \"status\": \"UNPAID\",\r\n    \"organizationId\": {{organizationId}},\r\n    \"debtPositionTypeOrgId\": {{debtPositionTypeOrgId}},\r\n    \"validityDate\": \"{{currentDate}}\",\r\n    \"flagIuvVolatile\": false,\r\n    \"debtPositionOrigin\": \"SPONTANEOUS\",\r\n    \"multiDebtor\": false,\r\n    \"flagPagoPaPayment\": false,\r\n    \"creationDate\": \"{{currentDate}}\",\r\n    \"updateDate\": \"{{currentDate}}\",\r\n    \"paymentOptions\": [\r\n        {\r\n            \"totalAmountCents\": {{amountCents}},\r\n            \"status\": \"TO_SYNC\",\r\n            \"dueDate\": \"2025-02-14T10:30:00+02:00\",\r\n            \"description\": \"description\",\r\n            \"paymentOptionType\": \"DOWN_PAYMENT\",\r\n            \"paymentOptionIndex\": 1,\r\n            \"creationDate\": \"{{currentDate}}\",\r\n            \"updateDate\": \"{{currentDate}}\",\r\n            \"installments\": [\r\n                {\r\n                    \"status\": \"TO_SYNC\",\r\n                    \"iupdPagopa\": \"iupdPagoppa\",\r\n                    \"iur\": \"iur\",\r\n                    \"iuf\": \"iuf\",\r\n                    \"dueDate\": \"2025-02-14T10:30:00+02:00\",\r\n                    \"paymentTypeCode\": \"paymentTypeCode\",\r\n                    \"amountCents\": {{amountCents}},\r\n                    \"remittanceInformation\": \"remittanceInformation\",\r\n                    \"balance\": \"balance\",\r\n                    \"legacyPaymentMetadata\": \"legacyPaymentMetadata\",\r\n                    \"debtor\": {\r\n                        \"entityType\": \"F\",\r\n                        \"fiscalCode\": \"PSTRRT80M20B157M\",\r\n                        \"fullName\": \"fullName\",\r\n                        \"address\": \"address\",\r\n                        \"civic\": \"civic\",\r\n                        \"postalCode\": \"postalCode\",\r\n                        \"location\": \"location\",\r\n                        \"province\": \"province\",\r\n                        \"nation\": \"nation\",\r\n                        \"email\": \"email@test.it\"\r\n                    },\r\n                    \"syncStatus\": {\r\n                        \"syncStatusFrom\": \"TO_SYNC\",\r\n                        \"syncStatusTo\": \"TO_SYNC\"\r\n                    },\r\n                    \"notificationDate\": \"2024-05-15T10:30:00+02:00\",\r\n                    \"ingestionFlowFileId\": 1,\r\n                    \"ingestionFlowFileLineNumber\": 1,\r\n                    \"creationDate\": \"{{currentDate}}\",\r\n                    \"updateDate\": \"{{currentDate}}\",\r\n                    \"transfers\": [\r\n                        {\r\n                            \"orgFiscalCode\": \"{{orgFiscalCode}}\",\r\n                            \"orgName\": \"{{orgName}}\",\r\n                            \"amountCents\": {{amountCents}},\r\n                            \"remittanceInformation\": \"remittanceInformation\",\r\n                            \"stampType\": \"stampType\",\r\n                            \"stampHashDocument\": \"stampHashDocument\",\r\n                            \"stampProvincialResidence\": \"stampProvincialResidence\",\r\n                            \"iban\": \"IT60X0542811101000000123456\",\r\n                            \"postalIban\": \"IT45Z0760105138274512345678\",\r\n                            \"category\": \"category\",\r\n                            \"transferIndex\": 1\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{debtPositionBaseUrl}}/debt-positions?massive=false",
							"host": [
								"{{debtPositionBaseUrl}}"
							],
							"path": [
								"debt-positions"
							],
							"query": [
								{
									"key": "massive",
									"value": "false"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// START COMMON UTILITIES\r",
					"\r",
					"// global variable to use in order to skip tests\r",
					"skipTests=false;\r",
					"\r",
					"// method to be invoked as first thing inside tests in order to instrument the \"pm\" variable:\r",
					"// eg: pm = pm=instrumentPmMethod(pm);\r",
					"instrumentPmMethod = (pm) => {\r",
					"    const pmProxy = {\r",
					"        get: function(pm, key) {\r",
					"            if (key == 'test') {\r",
					"                return (skipTests ? pm.test.skip : pm.test);\r",
					"            }\r",
					"            return pm[key];\r",
					"        }\r",
					"    };\r",
					"\r",
					"    return new Proxy(pm, pmProxy);\r",
					"}\r",
					"\r",
					"// function to be used in order to retry the current request, configuring a maximum number of attempts and a fixed delay between each invoke\r",
					"retryRequest = (pm, setTimeout, waitingMillis = 1000, maxAttempts = 30) => {\r",
					"    if(!pm || !setTimeout){\r",
					"        throw new Error(\"Invalid invoke to retryRequest function! Some required parameters are undefined: pm=\" + pm + \", setTimeout=\" + setTimeout)\r",
					"    }\r",
					"\r",
					"    const retryVariableName = \"retry_\" + pm.info.requestId\r",
					"    const attempt = (pm.variables.get(retryVariableName) ?? 0) + 1;\r",
					"    if(attempt < maxAttempts) {\r",
					"        console.info(pm.info.requestName + \" not ready, retrying [attempt \" + attempt + \"/\" + maxAttempts + \"] after \" + waitingMillis + \" ms\");\r",
					"        pm.variables.set(retryVariableName, attempt)\r",
					"        pm.execution.setNextRequest(pm.info.requestId);\r",
					"        return setTimeout(()=>{}, waitingMillis);\r",
					"    } else {\r",
					"        pm.test(pm.info.requestName + \" not ready\", () => pm.expect.fail(attempt + \" attempts\"));\r",
					"    }\r",
					"}\r",
					"\r",
					"// function to be used in order to retry the current request until it returns a known response HTTP status code\r",
					"retryWhenStatusCode = (pm, setTimeout, statusCode, waitingMillis, maxAttempts) => {\r",
					"    if(pm.response.code == statusCode){\r",
					"        console.log(\"Obtained \" + statusCode + \"! Performing retry...\")\r",
					"        skipTests=true;\r",
					"        return retryRequest(pm, setTimeout, waitingMillis, maxAttempts)\r",
					"    }\r",
					"}\r",
					"\r",
					"// XML utilities\r",
					"xml2js = require('xml2js');\r",
					"\r",
					"parseXmlResponse = (response) => {\r",
					"    let body;\r",
					"    xml2js.parseString(response.text(), {\r",
					"            ignoreAttrs: true, \r",
					"            explicitArray: false,\r",
					"        }, function (err, result) {\r",
					"            if(err){\r",
					"                console.error(err)\r",
					"            }\r",
					"        body = result;\r",
					"    });\r",
					"    return body;\r",
					"};"
				]
			}
		}
	],
	"variable": [
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "randomNumber",
			"value": ""
		},
		{
			"key": "fiscalCode",
			"value": ""
		},
		{
			"key": "debtPositionId",
			"value": ""
		},
		{
			"key": "organizationId",
			"value": ""
		},
		{
			"key": "debtPositionTypeOrgId",
			"value": ""
		},
		{
			"key": "debtPositionTypeOrgCode",
			"value": "CODE001",
			"type": "string"
		},
		{
			"key": "orgFiscalCode",
			"value": "",
			"type": "string"
		},
		{
			"key": "amountCents",
			"value": "10000",
			"type": "string"
		},
		{
			"key": "orgName",
			"value": "",
			"type": "string"
		},
		{
			"key": "currentDate",
			"value": "",
			"type": "string"
		},
		{
			"key": "ipaCode",
			"value": "ELOC_A",
			"type": "string"
		}
	]
}