server:
  http: "\${SERVER_PORT:8080}"

spring:
    application:
      name: ${artifactId}
      version: ${version}
    jmx.enabled: true
    threads:
      virtual:
        enabled: "\${VIRTUAL_THREADS_ENABLED:true}"
    jpa:
      show-sql: "\${SHOW_SQL:false}"
    datasource:
      debt-position:
        jdbc-url: "\${DEBT_POSITIONS_DB_URL:jdbc:postgresql://\${DEBT_POSITIONS_DB_HOST:localhost}:\${DEBT_POSITIONS_DB_PORT:5432}/\${DEBT_POSITIONS_DB_NAME:payhub}?currentSchema=debt_positions}"
        username: "\${DEBT_POSITIONS_DB_USER}"
        password: "\${DEBT_POSITIONS_DB_PASSWORD}"
        driverClassName: org.postgresql.Driver
      citizen:
        jdbc-url: "\${CITIZENDB_URL:jdbc:postgresql://\${CITIZENDB_HOST:localhost}:\${CITIZENDB_PORT:5432}/citizen}"
        username: "\${CITIZENDB_USER}"
        password: "\${CITIZENDB_PASSWORD}"
        driverClassName: org.postgresql.Driver
    data:
      rest:
        basePath: crud
    cloud:
      stream:
        binders:
          kafka-payments-producer:
            type: kafka
            environment:
              spring.cloud.stream.kafka.binder:
                brokers: "\${KAFKA_BINDER_BROKER:}"
                configuration:
                  sasl.jaas.config: "\${KAFKA_PAYMENTS_PRODUCER_SASL_JAAS_CONFIG:}"
                  key.serializer: org.apache.kafka.common.serialization.StringSerializer
        bindings:
          paymentsProducer-out-0:
            binder: kafka-payments-producer
            content-type: "\${KAFKA_CONTENT_TYPE:application/json}"
            destination: "\${KAFKA_TOPIC_PAYMENTS:}"
        kafka:
          binder:
            auto-create-topics: false
            configuration:
              heartbeat.interval.ms: "\${KAFKA_CONFIG_HEARTBEAT_INTERVAL_MS:3000}"
              session.timeout.ms: "\${KAFKA_CONFIG_SESSION_TIMEOUT_MS:30000}"
              request.timeout.ms: "\${KAFKA_CONFIG_REQUEST_TIMEOUT_MS:60000}"
              metadata.max.age.ms: "\${KAFKA_CONFIG_METADATA_MAX_AGE:180000}"
              sasl.mechanism: "\${KAFKA_CONFIG_SASL_MECHANISM:}"
              security.protocol: "\${KAFKA_CONFIG_SECURITY_PROTOCOL:}"
              max.request.size: "\${KAFKA_CONFIG_MAX_REQUEST_SIZE:1000000}"
          binders:
            paymentsProducer-out-0:
              producer:
                configuration:
                  client.id: debt-positions
                  connections.max.idle.ms: "\${KAFKA_PAYMENTS_PRODUCER_CONNECTION_MAX_IDLE_TIME:180000}"
                  retry.backoff.ms: "\${KAFKA_PAYMENTS_PRODUCER_RETRY_MS:\${KAFKA_RETRY_MS:10000}}"
                  linger.ms: "\${KAFKA_PAYMENTS_PRODUCER_LINGER_MS:\${KAFKA_LINGER_MS:2}}"
                  batch.size: "\${KAFKA_PAYMENTS_PRODUCER_BATCH_SIZE:\${KAFKA_BATCH_SIZE:16384}}"

management:
    endpoints:
      jmx:
        exposure.include: "*"
      web:
        exposure:
          include: health, info, prometheus, metrics
        base-path: /actuator
    endpoint:
      health:
        probes.enabled: true
        logging.slow-indicator-threshold: "\${HEALTH_ACTUATOR_LOGGER_TIMEOUT_DURATION:PT1S}"
        group:
          readiness.include: "*"
          liveness.include: livenessState,diskSpace,ping
      prometheus:
        enabled: true
    metrics:
      tags:
        application: ${artifactId}
      export:
        prometheus:
          enabled: true
          step: 1m
          descriptions: true
      enable:
        jvm: true
        process: true
        system: true
        http: true
        logback: true

logging:
  level:
    root: "\${LOG_LEVEL_ROOT:INFO}"
    it.gov.pagopa: "\${LOG_LEVEL_PAGOPA:INFO}"
    org.springframework: "\${LOG_LEVEL_SPRING:INFO}"
    org.springframework.boot.availability: "\${LOG_LEVEL_SPRING_BOOT_AVAILABILITY:DEBUG}"
    org.springframework.kafka: "\${LOG_LEVEL_SPRING_KAFKA:INFO}"

data-cipher:
  encrypt-psw: "\${DATA_CIPHER_ENCRYPT_PASSWORD:PWD}"
  hash-pepper: "\${DATA_CIPHER_HASH_PEPPER:PEPPER}"

springdoc:
  writer-with-default-pretty-printer: true

jwt:
  access-token:
    public-key: "\${JWT_TOKEN_PUBLIC_KEY:-----BEGIN PUBLIC KEY-----
                MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2ovm/rd3g69dq9PisinQ
                6mWy8ZttT8D+GKXCsHZycsGnN7b74TPyYy+4+h+9cgJeizp8RDRrufHjiBrqi/2r
                eOk/rD7ZHbpfQvHK8MYfgIVdtTxYMX/GGdOrX6/5TV2b8e2aCG6GmxF0UuEvxY9o
                TmcZUxnIeDtl/ixz4DQ754eS363qWfEA92opW+jcYzr07sbQtR86e+Z/s/CUeX6W
                1PHNvBqdlAgp2ecr/1DOLq1D9hEANBPSwbt+FM6FNe4vLphi7GTwiB0yaAuy+jE8
                odND6HPvvvmgbK1/2qTHn/HJjWUm11LUC73BszR32BKbdEEhxPQnnwswVekWzPi1
                IwIDAQAB
                -----END PUBLIC KEY-----}"

rest:
  default-timeout:
    connect-millis: "\${DEFAULT_REST_CONNECT_TIMEOUT_MILLIS:60000}"
    read-millis: "\${DEFAULT_REST_READ_TIMEOUT_MILLIS:60000}"
  organization:
    base-url: "\${ORGANIZATION_BASE_URL:http://p4pa-organization-microservice-chart:8080}"

iuv:
  informationSystemId: 00
